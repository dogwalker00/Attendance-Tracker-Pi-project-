#!/usr/bin/env python3
import RPi.GPIO as GPIO
import time
import json
import threading
import paho.mqtt.client as mqtt

# Config
IR_PIN = 18
EMITTER_PIN = 5
LED_PIN = 12       # single-channel control (digital on/off)
DEBOUNCE_MS = 200
COMMON_ANODE = False

THINGSBOARD_HOST = 'demo.thingsboard.io'
ACCESS_TOKEN = 'zQ87wVhhSkHoQ2BiI6wM'
PUBLISH_INTERVAL = 2 * 60 * 60  # 2 hours

# Globals
count = 0
_last_event_time = 0.0
_stop_event = threading.Event()

# MQTT
client = mqtt.Client()

def tb_connect():
    client.username_pw_set(ACCESS_TOKEN)
    client.connect(THINGSBOARD_HOST, 1883, 60)
    client.loop_start()

def tb_send_count(n):
    client.publish('v1/devices/me/telemetry', json.dumps({"count": n}), qos=1)

def now_ms():
    return time.time() * 1000.0

def setup():
    global ON_LEVEL, OFF_LEVEL
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(IR_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    GPIO.setup(EMITTER_PIN, GPIO.OUT)
    GPIO.output(EMITTER_PIN, GPIO.HIGH)
    GPIO.setup(LED_PIN, GPIO.OUT)
    # precompute levels so runtime code is simple
    ON_LEVEL  = GPIO.LOW if COMMON_ANODE else GPIO.HIGH
    OFF_LEVEL = GPIO.HIGH if COMMON_ANODE else GPIO.LOW
    GPIO.output(LED_PIN, OFF_LEVEL)   # start LED off

def set_led(on):
    GPIO.output(LED_PIN, ON_LEVEL if on else OFF_LEVEL)

def handle_ir(channel):
    global count, _last_event_time
    now = now_ms()
    if now - _last_event_time < DEBOUNCE_MS:
        return
    _last_event_time = now
    if GPIO.input(IR_PIN) == GPIO.LOW:   # beam broken (typical)
        count += 1
        set_led(True)
    else:
        set_led(False)

def publisher():
    while not _stop_event.wait(PUBLISH_INTERVAL):
        try:
            tb_send_count(count)
        except Exception:
            pass

def main_loop():
    GPIO.add_event_detect(IR_PIN, GPIO.BOTH, callback=handle_ir, bouncetime=DEBOUNCE_MS)
    t = threading.Thread(target=publisher, daemon=True)
    t.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        _stop_event.set()
        t.join()

def cleanup():
    set_led(False)
    GPIO.output(EMITTER_PIN, GPIO.LOW)
    GPIO.cleanup()
    try:
        client.loop_stop()
        client.disconnect()
    except Exception:
        pass

if __name__ == "__main__":
    tb_connect()
    setup()
    try:
        main_loop()
    finally:
        cleanup()

