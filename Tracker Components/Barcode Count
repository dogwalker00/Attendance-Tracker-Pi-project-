#!/usr/bin/env python3
import paho.mqtt.client as mqtt
import csv
import os
import time
from datetime import datetime, timedelta
import json

# ThingsBoard host and access tokens
tb_host = 'demo.thingsboard.io'
access_token_main = 'Mqtv8kLjV5bbhRDUp3mv'   # existing device (per-person telemetry)
access_token_total = 'zQ87wVhhSkHoQ2BiI6wM'  # device for Total Count

# MQTT clients
client = mqtt.Client()
client.username_pw_set(access_token_main)
client.connect(tb_host, 1883, 60)

client_total = mqtt.Client()
client_total.username_pw_set(access_token_total)
client_total.connect(tb_host, 1883, 60)

# Update the CSV file path to Barcode.csv
csv_file_path = 'Barcode.csv'

# Load existing data from the CSV file
def load_data():
    data = {}
    if os.path.exists(csv_file_path):
        with open(csv_file_path, mode='r', newline='') as file:
            reader = csv.reader(file)
            headers = next(reader)  # Skip header row
            for row in reader:
                if not row:
                    continue
                name = row[0].strip()
                barcode = row[1].strip()
                # Ensure there are 7 day columns; fill missing with 0
                day_values = row[2:2+7]
                day_data = [int(value) if value and value.isdigit() else 0 for value in day_values]
                # pad to 7 days if needed
                while len(day_data) < 7:
                    day_data.append(0)
                data[barcode] = {'name': name, 'day_data': day_data}
    return data

# Get the next available day column
def get_next_day(data):
    for i in range(7):  # Days 1 to 7
        # If any barcode missing day index (defensive), treat as 0
        if all((data[barcode]['day_data'][i] if i < len(data[barcode]['day_data']) else 0) == 0 for barcode in data):
            return i
    return None  # All days are filled

# Update the day data for the scanned barcode
def update_day_data(barcode, data, current_day):
    if barcode in data:
        # Defensive: ensure day_data has current_day index
        while len(data[barcode]['day_data']) <= current_day:
            data[barcode]['day_data'].append(0)
        # Update day data (increment the current day)
        if data[barcode]['day_data'][current_day] < 1:  # Increment only if it's less than 1
            data[barcode]['day_data'][current_day] += 1
            print(f"Updated {data[barcode]['name']} for Day {current_day + 1}.")
        else:
            print(f"Day {current_day + 1} for {data[barcode]['name']} is already filled.")
    else:
        print(f"Barcode {barcode} not found in the data.")

# Save updated data back to the CSV file
def save_data(data):
    with open(csv_file_path, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Name', 'Barcode', 'Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'])
        for barcode, info in data.items():
            # Ensure exactly 7 day columns are written
            day_data = info['day_data'][:7] + [0] * max(0, 7 - len(info['day_data']))
            writer.writerow([info['name'], barcode] + day_data)

# Publish telemetry data to ThingsBoard (per-person)
def publish_telemetry(data, current_day):
    telemetry_data = {}
    for barcode, info in data.items():
        # Defensive access
        value = info['day_data'][current_day] if current_day < len(info['day_data']) else 0
        telemetry_data[info['name']] = value  # Send attendance for the current day

    payload = json.dumps(telemetry_data)
    client.publish('v1/devices/me/telemetry', payload)
    print("Per-person telemetry data sent to ThingsBoard:", payload)

# Compute total count for the current day
def compute_total_count(data, current_day):
    return sum(1 for info in data.values() if (info['day_data'][current_day] if current_day < len(info['day_data']) else 0) >= 1)

# Publish Total Count to ThingsBoard (separate device)
def publish_total_count(total, current_day):
    payload = json.dumps({'Total Count': total, 'day': current_day + 1})
    client_total.publish('v1/devices/me/telemetry', payload)
    print("Total Count sent to ThingsBoard:", payload)

# Main function to run the barcode scanner
def main():
    data = load_data()
    if not data:
        print(f"No data loaded from {csv_file_path}. Ensure the file exists and has the correct format.")
        return

    current_day = get_next_day(data)

    if current_day is None:
        print("All days are filled. No more attendance can be recorded.")
        return

    print(f"Starting attendance collection for Day {current_day + 1}.")
    start_time = datetime.now()
    end_time = start_time + timedelta(hours=1)

    try:
        while datetime.now() < end_time:
            scanned_data = input("Scan a barcode (or type 'exit' to finish early): ").strip()
            if scanned_data.lower() == 'exit':
                break
            if scanned_data == '':
                continue
            update_day_data(scanned_data, data, current_day)
    except KeyboardInterrupt:
        print("\nInterrupted by user.")

    save_data(data)
    publish_telemetry(data, current_day)  # Publish per-person telemetry data
    total = compute_total_count(data, current_day)
    publish_total_count(total, current_day)  # Publish aggregated total count
    print(f"Day {current_day + 1} attendance tracking ended. Total Count: {total}")

if __name__ == "__main__":
    main()

